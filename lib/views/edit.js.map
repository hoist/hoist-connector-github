{"version":3,"sources":["views/edit.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAEA,IAAI,IAAI,GAAG,KAAH,CAAS,SAAT;;IAEF;;;AACJ,WADI,QACJ,CAAY,KAAZ,EAAmB;0BADf,UACe;;uEADf,qBAEI,QADW;;AAEjB,UAAK,KAAL,GAAa;AACX,cAAQ,EAAR;KADF,CAFiB;AAKjB,QAAI,CAAC,MAAM,SAAN,EAAiB;AACpB,YAAK,KAAL,CAAW,IAAX,GAAkB,SAAlB,CADoB;KAAtB;iBALiB;GAAnB;;eADI;;8BAUM;AACR,WAAK,KAAL,CAAW,SAAX,GADQ;;;;6BAGD;;;AACP,aACE;AAAC,UAAE,IAAH;mBAAQ,WAAQ,OAAR,IAAoB,KAAK,KAAL,CAA5B;QACE;AAAC,YAAE,KAAH;YAAS,MAAK,OAAL,EAAa,MAAK,OAAL,EAAtB;UACE,oBAAC,GAAG,aAAa,MAAjB,IAAwB,MAAM,KAAK,KAAL,CAAW,iBAAX,GAA+B,aAA/B,GAA+C,SAA/C,EAA0D,MAAK,OAAL,EAAa,SAAS,mBAAI;AAC9G,qBAAO,OAAK,OAAL,EAAP,CAD8G;aAAJ,EAA9G,CADF;SADF;QAMG,KAAK,KAAL,CAAW,iBAAX,GAA+B;AAAC,YAAE,KAAH;YAAS,MAAK,QAAL,EAAc,MAAK,QAAL,EAAvB;UAC9B;;cAAK,OAAO;AACV,8BAAa,mBAAb;AACA,8BAAa,MAAb;eAFG,EAAL;YAIE;;gBAAM,OAAO;AACX,4BAAS,EAAT;AACA,yBAAM,SAAN;AACA,2BAAQ,OAAR;AACA,gCAAa,CAAb;iBAJI,EAAN;;aAJF;YAUE;;gBAAM,OAAO;AACX,4BAAS,EAAT;AACA,yBAAM,SAAN;AACA,2BAAQ,OAAR;AACA,gCAAa,EAAb;iBAJI,EAAN;;aAVF;WAD8B;UAkB9B,oBAAC,EAAE,UAAH;AACE,oBAAQ,CAAC,oBAAD,EAAuB,mBAAvB,CAAR;AACA,2BAAe,CAAC,mBAAD,CAAf;AACA,yBAAa,KAAK,KAAL,CAAW,WAAX,EAHf,CAlB8B;SAA/B,GAsBY;AAAC,YAAE,KAAH;YAAS,MAAK,QAAL,EAAc,MAAK,QAAL,EAAvB;;SAtBZ;OAPL,CADO;;;;SAbL;EAAiB,MAAM,SAAN;;kBAmDR;;AACf,OAAO,QAAP,GAAkB,QAAlB","file":"views/edit.js","sourcesContent":["/* globals UI */\n\nvar C = UI.Views.Connector;\n\nclass EditForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      events: []\n    };\n    if (!props.connector) {\n      this.state.mode = 'connect';\n    }\n  }\n  connect() {\n    this.props.onConnect();\n  }\n  render() {\n    return (\n      <C.Page default=\"setup\" {...this.props}>\n        <C.Panel name=\"Setup\" slug=\"setup\">\n          <UI.FormElements.Button text={this.props.connectorInstance ? 'Reauthorize' : 'Connect'} type=\"large\" onClick={()=>{\n              return this.connect();\n            }} />\n        </C.Panel>\n        {this.props.connectorInstance ? <C.Panel name=\"Events\" slug=\"events\">\n          <div style={{\n            borderBottom:'1px solid #F1F1F1',\n            marginBottom:'25px'\n          }}>\n            <span style={{\n              fontSize:15,\n              color:'#666666',\n              display:'block',\n              marginBottom:5\n            }}>Check the boxes of the events you want to subscribe to.</span>\n            <span style={{\n              fontSize:11,\n              color:'#B3B3B3',\n              display:'block',\n              marginBottom:20\n            }}>Checking a box will automatically subscribe you to that event.</span>\n          </div>\n          <C.EventsGrid\n            events={['github:repo:update', 'github:new:commit']}\n            subscriptions={['github:new:commit']}\n            onSubscribe={this.props.onSubscribe} />\n        </C.Panel> : <C.Panel name=\"Events\" slug=\"events\">\n          Come back later for Events\n        </C.Panel>}\n      </C.Page>\n    );\n  }\n}\n\nexport default EditForm;\nglobal.EditForm = EditForm;\n"],"sourceRoot":"/source/"}