{"version":3,"sources":["connector.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AASA,IAAI,YAAY;AACd,YAAU,0BAAV;CADE;AAGJ,IAAI,aAAa,wBAAb;;;;;;IAKiB;;;;;;;;;;;AASnB,WATmB,eASnB,CAAY,aAAZ,EAA2B;0BATR,iBASQ;;uEATR,4BAUX,mBAAM,EAAN,EAAU,aAAV,EAAyB,SAAzB,IADmB;;AAEzB,UAAK,SAAL,GAAiB,cAAc,QAAd,CAFQ;AAGzB,UAAK,YAAL,GAAoB,cAAc,KAAd,IAAuB,yCAAvB,CAHK;;GAA3B;;;;;;;;;eATmB;;qCAoBF,eAAe;;;AAC9B,aAAO,2BArBU,iEAqBa,cAAvB,CACJ,IADI,CACC,UAAC,MAAD,EAAY;AAChB,eAAO,QAAQ,OAAR,CAAgB,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,OAAhB,CAA3B,EACJ,IADI,CACC,UAAC,CAAD,EAAO;AACX,iBAAO,cAAc,GAAd,CAAkB,OAAlB,EAA2B,CAA3B,EAA8B,IAA9B,CAAmC,YAAM;AAC9C,mBAAO,KAAP,GAAe,CAAf,CAD8C;AAE9C,mBAAO,KAAP,GAAe,OAAK,YAAL,CAF+B;AAG9C,mBAAO,MAAP,CAH8C;WAAN,CAA1C,CADW;SAAP,CADR,CADgB;OAAZ,CADR,CAD8B;;;;wBAmB5B,MAAM;AACR,UAAI,WAAS,aAAa,IAAtB,CADI;AAER,aAAO,KAAK,eAAL,CAAqB,KAArB,EAA4B,GAA5B,EAAiC,IAAjC,CAAsC,UAAC,MAAD,EAAY;AACvD,eAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CADuD;OAAZ,CAA7C,CAFQ;;;;yBAML,MAAM,MAAM;AACf,UAAI,WAAS,aAAa,IAAtB,CADW;AAEf,aAAO,KAAK,eAAL,CAAqB,MAArB,EAA6B,GAA7B,EAAkC,IAAlC,EAAwC,IAAxC,CAA6C,UAAC,MAAD,EAAY;AAC9D,eAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CAD8D;OAAZ,CAApD,CAFe;;;;0BAMX,MAAM,MAAM;AAChB,UAAI,WAAS,aAAa,IAAtB,CADY;AAEhB,aAAO,KAAK,eAAL,CAAqB,OAArB,EAA8B,GAA9B,EAAmC,IAAnC,EAAyC,IAAzC,CAA8C,UAAC,MAAD,EAAY;AAC/D,eAAO,KAAK,KAAL,CAAW,MAAX,CAAP,CAD+D;OAAZ,CAArD,CAFgB;;;;4BAMX,MAAM;AACX,UAAI,WAAS,aAAa,IAAtB,CADO;AAEX,aAAO,KAAK,eAAL,CAAqB,QAArB,EAA+B,GAA/B,CAAP,CAFW;;;;sCAxBY;AACvB,aAAO,QAAQ,OAAR,CAAgB;AACrB,eAAO,yCAAP;OADK,CAAP,CADuB;;;;SAjCN","file":"connector.js","sourcesContent":["import {\n  OAuth2ConnectorBase\n}\nfrom '@hoist/oauth-connector';\nimport {\n  merge\n}\nfrom 'lodash';\n\nlet overrides = {\n  baseSite: 'https://github.com/login'\n};\nlet apiBaseUri = 'https://api.github.com'\n  /**\n   * A Hoist Connector for connecting to GitHub\n   * @extends {OAuth2ConnectorBase}\n   */\nexport default class GitHubConnector extends OAuth2ConnectorBase {\n\n  /**\n   * create a new connector\n   * @param {object} configuration - the configuration properties to use\n   * @param {string} configuration.clientId - the OAuth2 client id\n   * @param {string} configuration.clientSecret - the OAuth2 client secret\n   * @param {string} [configuration.scope='user,repo,admin:repo_hook,notifications'] - a comma separated list of scopes to use https://developer.github.com/v3/oauth/#scopes\n   */\n  constructor(configuration) {\n    super(merge({}, configuration, overrides));\n    this._clientId = configuration.clientId;\n    this._scopeString = configuration.scope || 'user,repo,admin:repo_hook,notifications';\n  }\n\n  /**\n   * @private\n   * @param AuthorizationStore authorization the users authorisation store\n   * @returns Promise<object> an object containing key value pairs to send with the client to the authorization url\n   */\n  _authorizeParams(authorization) {\n    return super._authorizeParams(authorization)\n      .then((params) => {\n        return Promise.resolve(Math.round(Math.random() * 5000000))\n          .then((r) => {\n            return authorization.set('state', r).then(() => {\n              params.state = r;\n              params.scope = this._scopeString;\n              return params;\n            });\n          });\n      });\n  }\n  static defaultSettings() {\n    return Promise.resolve({\n      scope: 'user,repo,admin:repo_hook,notifications'\n    });\n  }\n\n  get(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('GET', uri).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  post(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('POST', uri, body).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  patch(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('PATCH', uri, body).then((result) => {\n      return JSON.parse(result);\n    });\n  }\n  delete(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('DELETE', uri);\n  }\n}\n\n/**\n * @external {OAuth2ConnectorBase} https://doc.esdoc.org/github.com/hoist/oauth-connector/class/src/oauth2_connector.js~OAuth2ConnectorBase.html\n */\n"],"sourceRoot":"/source/"}