{"version":3,"sources":["connector.js"],"names":[],"mappings":";;;;;;;;;;;;;;mCAGK,wBAAwB;;sBAIxB,QAAQ;;AAEb,IAAI,SAAS,GAAG;AACd,UAAQ,EAAE,0BAA0B;CACrC,CAAC;AACF,IAAI,UAAU,GAAG,wBAAwB,CAAA;;;;;;IAKpB,eAAe;YAAf,eAAe;;;;;;;;;;AASvB,WATQ,eAAe,CAStB,aAAa,EAAE;0BATR,eAAe;;AAUhC,+BAViB,eAAe,6CAU1B,mBAAM,EAAE,EAAE,aAAa,EAAE,SAAS,CAAC,EAAE;AAC3C,QAAI,CAAC,SAAS,GAAG,aAAa,CAAC,QAAQ,CAAC;AACxC,QAAI,CAAC,YAAY,GAAG,aAAa,CAAC,KAAK,IAAI,yCAAyC,CAAC;GACtF;;;;;;;;;;;;eAbkB,eAAe;;WAoBlB,0BAAC,aAAa,EAAE;;;AAC9B,aAAO,2BArBU,eAAe,kDAqBF,aAAa,EACxC,IAAI,CAAC,UAAC,MAAM,EAAK;AAChB,eAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,OAAO,CAAC,CAAC,CACxD,IAAI,CAAC,UAAC,CAAC,EAAK;AACX,iBAAO,aAAa,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAM;AAC9C,kBAAM,CAAC,KAAK,GAAG,CAAC,CAAC;AACjB,kBAAM,CAAC,KAAK,GAAG,MAAK,YAAY,CAAC;AACjC,mBAAO,MAAM,CAAC;WACf,CAAC,CAAC;SACJ,CAAC,CAAC;OACN,CAAC,CAAC;KACN;;;WAOE,aAAC,IAAI,EAAE;AACR,UAAI,GAAG,QAAM,UAAU,GAAG,IAAI,AAAE,CAAC;AACjC,aAAO,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AACvD,eAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;OAC9B,CAAC,CAAC;KACJ;;;WACG,cAAC,IAAI,EAAE,IAAI,EAAE;AACf,UAAI,GAAG,QAAM,UAAU,GAAG,IAAI,AAAE,CAAC;AACjC,aAAO,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AAC9D,eAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;OAC9B,CAAC,CAAC;KACJ;;;WACI,eAAC,IAAI,EAAE,IAAI,EAAE;AAChB,UAAI,GAAG,QAAM,UAAU,GAAG,IAAI,AAAE,CAAC;AACjC,aAAO,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC,UAAC,MAAM,EAAK;AAC/D,eAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;OAC9B,CAAC,CAAC;KACJ;;;WACK,iBAAC,IAAI,EAAE;AACX,UAAI,GAAG,QAAM,UAAU,GAAG,IAAI,AAAE,CAAC;AACjC,aAAO,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;KAC5C;;;WA3BqB,2BAAG;AACvB,aAAO,OAAO,CAAC,OAAO,CAAC;AACrB,aAAK,EAAE,yCAAyC;OACjD,CAAC,CAAC;KACJ;;;SArCkB,eAAe;;;qBAAf,eAAe","file":"connector.js","sourcesContent":["import {\n  OAuth2ConnectorBase\n}\nfrom '@hoist/oauth-connector';\nimport {\n  merge\n}\nfrom 'lodash';\n\nlet overrides = {\n  baseSite: 'https://github.com/login'\n};\nlet apiBaseUri = 'https://api.github.com'\n  /**\n   * A Hoist Connector for connecting to GitHub\n   * @extends {OAuth2ConnectorBase}\n   */\nexport default class GitHubConnector extends OAuth2ConnectorBase {\n\n  /**\n   * create a new connector\n   * @param {object} configuration - the configuration properties to use\n   * @param {string} configuration.clientId - the OAuth2 client id\n   * @param {string} configuration.clientSecret - the OAuth2 client secret\n   * @param {string} [configuration.scope='user,repo,admin:repo_hook,notifications'] - a comma separated list of scopes to use https://developer.github.com/v3/oauth/#scopes\n   */\n  constructor(configuration) {\n    super(merge({}, configuration, overrides));\n    this._clientId = configuration.clientId;\n    this._scopeString = configuration.scope || 'user,repo,admin:repo_hook,notifications';\n  }\n\n  /**\n   * @private\n   * @param AuthorizationStore authorization the users authorisation store\n   * @returns Promise<object> an object containing key value pairs to send with the client to the authorization url\n   */\n  _authorizeParams(authorization) {\n    return super._authorizeParams(authorization)\n      .then((params) => {\n        return Promise.resolve(Math.round(Math.random() * 5000000))\n          .then((r) => {\n            return authorization.set('state', r).then(() => {\n              params.state = r;\n              params.scope = this._scopeString;\n              return params;\n            });\n          });\n      });\n  }\n  static defaultSettings() {\n    return Promise.resolve({\n      scope: 'user,repo,admin:repo_hook,notifications'\n    });\n  }\n\n  get(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('GET', uri).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  post(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('POST', uri, body).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  patch(path, body) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('PATCH', uri, body).then((result) => {\n      return JSON.parse(result[0]);\n    });\n  }\n  delete(path) {\n    let uri = `${apiBaseUri}${path}`;\n    return this._performRequest('DELETE', uri);\n  }\n}\n\n/**\n * @external {OAuth2ConnectorBase} https://doc.esdoc.org/github.com/hoist/oauth-connector/class/src/oauth2_connector.js~OAuth2ConnectorBase.html\n */\n"],"sourceRoot":"/source/"}